// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model Course {
  id         String   @id @default(uuid())
  name       CourseName
  branches   Branch[]
}

enum CourseName {
  DIPLOMA
  DEGREE
}

model Branch {
  id         String   @id @default(uuid())
  name       String
  courseId   String
  course     Course   @relation(fields: [courseId], references: [id])
  semesters  Semester[]
}

model Semester {
  id         String    @id @default(uuid())
  number     Int       
  branchId   String
  branch     Branch    @relation(fields: [branchId], references: [id])
  subjects   Subject[]
}

model Subject {
  id         String    @id @default(uuid())
  name       String
  semesterId String
  semester   Semester  @relation(fields: [semesterId], references: [id])
  notes      Notes[]
}

model Notes {
  id                  String   @id @default(uuid())
  chapterName         String
  chapterNumber       Int
  notionDocId         String   
  youtubePlaylistLink String
  subjectId           String
  subject             Subject  @relation(fields: [subjectId], references: [id])
}
